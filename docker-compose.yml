version: '3.8'

services:
  # Face Recognition API Server
  face-recognition-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: face-recognition-api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/face_recognition
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=false
      - LOG_LEVEL=INFO
      - MAX_FILE_SIZE=10485760  # 10MB
      - RATE_LIMIT_PER_MINUTE=100
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
    volumes:
      - ./data/uploads:/app/data/uploads
      - ./data/models:/app/data/models
      - ./data/exports:/app/data/exports
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - face-recognition-network

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: face-recognition-db
    environment:
      POSTGRES_DB: face_recognition
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - face-recognition-network

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: face-recognition-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - face-recognition-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: face-recognition-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl/certs:ro
      - ./docs:/var/www/docs:ro
    depends_on:
      - face-recognition-api
    restart: unless-stopped
    networks:
      - face-recognition-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: face-recognition-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - face-recognition-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: face-recognition-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - face-recognition-network

  # Development Tools (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: face-recognition-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@facerecognition.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - face-recognition-network
    profiles:
      - dev

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  face-recognition-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
